--------------------------------------------------------------------------------
-- Find the names of all students who are friends with someone named Gabriel. --
--------------------------------------------------------------------------------

SELECT name
FROM Highschooler, Friend
WHERE Highschooler.ID = Friend.ID2
AND (Friend.ID1 = 1689 
OR  Friend.ID1 = 1911)
ORDER BY name

---------------------------------------------------------------------------------------
-- For every student who likes someone 2 or more grades younger than themselves, return 
-- that student's name and grade, and the name and grade of the student they like.  
----------------------------------------------------------------------------------------

SELECT h1.name AS name1, h1.grade AS grade1, h2.name AS name2, h2.grade AS grade2
FROM Highschooler h1, Highschooler h2, Likes
WHERE (h1.grade - h2.grade = 2
OR h2.grade - h1.grade = 2)
AND (Likes.ID1 = h1.ID
AND Likes.ID2 = h2.ID)

--------------------------------------------------------------------------------
-- For every pair of students who both like each other, return the name and grade of both students. 
-- Include each pair only once, with the two names in alphabetical order.  
--------------------------------------------------------------------------------

SELECT h1.name AS name1, h1.grade AS grade1, h2.name AS name2, h2.grade AS grade2
FROM Highschooler h1, Highschooler h2, Likes l1, Likes l2
WHERE h1.name &lt; h2.name
AND l1.ID1 = h1.ID
AND l1.ID2 = h2.ID
AND l2.ID1 = h2.ID
AND l2.ID2 = h1.ID

--------------------------------------------------------------------------------
-- Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. 
-- Sort by grade, then by name within each grade. 
--------------------------------------------------------------------------------

SELECT name, grade
FROM Highschooler
EXCEPT 
SELECT name, grade FROM Highschooler, Likes
WHERE (Likes.ID1 = Highschooler.ID
OR Highschooler.ID = Likes.ID2)
ORDER BY grade

--------------------------------------------------------------------------------
-- For every situation where student A likes student B, but we have no information about 
-- whom B likes (that is, B does not appear as an ID1 in the Likes table), 
-- return A and B's names and grades.  
--------------------------------------------------------------------------------

SELECT h1.name AS name1, h1.grade AS grade1, h2.name AS name2, h2.grade AS grade2
FROM Highschooler h1, Highschooler h2, Likes
WHERE Likes.ID1 = h1.ID
AND Likes.ID2 = h2.ID
AND NOT EXISTS 
	(SELECT h2.ID FROM Likes WHERE LIKES.ID1 = h2.ID)
ORDER BY name1

--------------------------------------------------------------------------------
-- Find names and grades of students who only have friends in the same grade. 
-- Return the result sorted by grade, then by name within each grade.  
--------------------------------------------------------------------------------

SELECT h1.name as name, h1.grade as grade
FROM Highschooler h1
WHERE h1.ID NOT IN (SELECT ID1 FROM Friend, Highschooler h2
	WHERE h1.ID = Friend.ID1
	AND Friend.ID2 = h2.ID
	and h1.grade != h2.grade) 
ORDER BY grade, name

--------------------------------------------------------------------------------
-- For each student A who likes a student B where the two are not friends, 
-- find if they have a friend C in common (who can introduce them!). 
-- For all such trios, return the name and grade of A, B, and C.  
--------------------------------------------------------------------------------

SELECT h1.name AS name, h1.grade AS grade, h2.name AS name, h2.grade AS grade, h3.name AS name, h3.grade AS grade
FROM Highschooler h1, Highschooler h2, Highschooler h3, Friend f1, Friend f2, Likes 
WHERE h1.ID = Likes.ID1
AND Likes.ID2 = h2.ID
AND h2.ID NOT IN( 
SELECT ID2 
FROM Friend
WHERE ID1 = h1.ID)
AND h1.ID = f1.ID1 
AND f1.ID2 = h3.ID
AND h2.ID = f2.ID1
AND f2.ID2 = h3.ID

--------------------------------------------------------------------------------
-- Find the difference between the number of students in the school and the number of different first names. 
--------------------------------------------------------------------------------

SELECT count(name) - count(DISTINCT name)
FROM Highschooler

--------------------------------------------------------------------------------
-- Find the name and grade of all students who are liked by more than one other student.  
--------------------------------------------------------------------------------

SELECT name, grade
FROM Highschooler
INNER JOIN Likes ON Highschooler.ID = Likes.ID2
GROUP BY ID2
HAVING Count(ID)>1
ORDER BY name
